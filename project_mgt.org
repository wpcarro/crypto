* Programming
* DONE debug crashing Tasks
* DONE matchmake buy and sell sides as permutations
  * exchange -> orderbook map
  * filter_map by `profitable?`
  * {buy :: Order.t, sell: Order.t, profit :: float}
  * Enum.max_by(...profit...)
* DONE place successful orders with sandbox APIs
* DONE genericize wallet actions
  * wallets use cold storage and hot wallets so the sending address differs from receipt address
  * transaction:  account -> account
  * deposit:      bank -> account
  * withdraw:     account -> bank
* DONE integrate Coinbase wallet with GDAX exchange
* DONE wire up Rocks DB to collect spread data
* DONE ensure HTTPoison starts automatically
* DONE ensure Maestro starts automatically
* TODO integrate StatsD using Statix Elixir client
* TODO record buy data for each exchange (increment "gdax.buy")
* TODO record sell data for each exchange (increment "gdax.sell")
* TODO record failed arbitrage opportunities (ie caught holding one side of the arbitrage)
* TODO record "no pairable exchanges" event (increment "no_pairable_exchanges")
* TODO record exchange timeout events (increment "gdax.fetch_orderbook_timeout")
* TODO use buy and sell sides in matchmaking algorithm
* TODO respond to status code 429 and implement back off
* TODO implement high fidelity timing
* TODO implement logic to manage failed arbitrage sides (eg caught only satisying sell or buy side)
* TODO host on Amazon EC2 instance
* TODO hook in twilio alerts for profits greater than $5
* TODO integrate Gemini wallet with exchange
* TODO integrate Kraken wallet with exchange
* TODO impl socket feed for GDAX
* TODO impl socket feed for Bitfinex
* Administration
* TODO determine if we should withdraw profits from accounts (and incur fee) or keep profits around to make future buys
* TODO register margin account on GDAX
